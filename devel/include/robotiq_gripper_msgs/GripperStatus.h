// Generated by gencpp from file robotiq_gripper_msgs/GripperStatus.msg
// DO NOT EDIT!


#ifndef ROBOTIQ_GRIPPER_MSGS_MESSAGE_GRIPPERSTATUS_H
#define ROBOTIQ_GRIPPER_MSGS_MESSAGE_GRIPPERSTATUS_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace robotiq_gripper_msgs
{
template <class ContainerAllocator>
struct GripperStatus_
{
  typedef GripperStatus_<ContainerAllocator> Type;

  GripperStatus_()
    : g_act(0)
    , g_gto(0)
    , g_sta(0)
    , g_obj(0)
    , g_flt(0)
    , g_pr(0)
    , g_po(0)
    , g_cu(0)  {
    }
  GripperStatus_(const ContainerAllocator& _alloc)
    : g_act(0)
    , g_gto(0)
    , g_sta(0)
    , g_obj(0)
    , g_flt(0)
    , g_pr(0)
    , g_po(0)
    , g_cu(0)  {
  (void)_alloc;
    }



   typedef uint8_t _g_act_type;
  _g_act_type g_act;

   typedef uint8_t _g_gto_type;
  _g_gto_type g_gto;

   typedef uint8_t _g_sta_type;
  _g_sta_type g_sta;

   typedef uint8_t _g_obj_type;
  _g_obj_type g_obj;

   typedef uint8_t _g_flt_type;
  _g_flt_type g_flt;

   typedef uint8_t _g_pr_type;
  _g_pr_type g_pr;

   typedef uint8_t _g_po_type;
  _g_po_type g_po;

   typedef uint8_t _g_cu_type;
  _g_cu_type g_cu;





  typedef boost::shared_ptr< ::robotiq_gripper_msgs::GripperStatus_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::robotiq_gripper_msgs::GripperStatus_<ContainerAllocator> const> ConstPtr;

}; // struct GripperStatus_

typedef ::robotiq_gripper_msgs::GripperStatus_<std::allocator<void> > GripperStatus;

typedef boost::shared_ptr< ::robotiq_gripper_msgs::GripperStatus > GripperStatusPtr;
typedef boost::shared_ptr< ::robotiq_gripper_msgs::GripperStatus const> GripperStatusConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::robotiq_gripper_msgs::GripperStatus_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::robotiq_gripper_msgs::GripperStatus_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::robotiq_gripper_msgs::GripperStatus_<ContainerAllocator1> & lhs, const ::robotiq_gripper_msgs::GripperStatus_<ContainerAllocator2> & rhs)
{
  return lhs.g_act == rhs.g_act &&
    lhs.g_gto == rhs.g_gto &&
    lhs.g_sta == rhs.g_sta &&
    lhs.g_obj == rhs.g_obj &&
    lhs.g_flt == rhs.g_flt &&
    lhs.g_pr == rhs.g_pr &&
    lhs.g_po == rhs.g_po &&
    lhs.g_cu == rhs.g_cu;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::robotiq_gripper_msgs::GripperStatus_<ContainerAllocator1> & lhs, const ::robotiq_gripper_msgs::GripperStatus_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace robotiq_gripper_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::robotiq_gripper_msgs::GripperStatus_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robotiq_gripper_msgs::GripperStatus_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robotiq_gripper_msgs::GripperStatus_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robotiq_gripper_msgs::GripperStatus_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robotiq_gripper_msgs::GripperStatus_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robotiq_gripper_msgs::GripperStatus_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::robotiq_gripper_msgs::GripperStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ae882ea5fd2ea006815a4db0a359f9f4";
  }

  static const char* value(const ::robotiq_gripper_msgs::GripperStatus_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xae882ea5fd2ea006ULL;
  static const uint64_t static_value2 = 0x815a4db0a359f9f4ULL;
};

template<class ContainerAllocator>
struct DataType< ::robotiq_gripper_msgs::GripperStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "robotiq_gripper_msgs/GripperStatus";
  }

  static const char* value(const ::robotiq_gripper_msgs::GripperStatus_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::robotiq_gripper_msgs::GripperStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 g_act\n"
"uint8 g_gto\n"
"uint8 g_sta\n"
"uint8 g_obj\n"
"uint8 g_flt\n"
"uint8 g_pr\n"
"uint8 g_po\n"
"uint8 g_cu\n"
;
  }

  static const char* value(const ::robotiq_gripper_msgs::GripperStatus_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::robotiq_gripper_msgs::GripperStatus_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.g_act);
      stream.next(m.g_gto);
      stream.next(m.g_sta);
      stream.next(m.g_obj);
      stream.next(m.g_flt);
      stream.next(m.g_pr);
      stream.next(m.g_po);
      stream.next(m.g_cu);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GripperStatus_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::robotiq_gripper_msgs::GripperStatus_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::robotiq_gripper_msgs::GripperStatus_<ContainerAllocator>& v)
  {
    s << indent << "g_act: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.g_act);
    s << indent << "g_gto: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.g_gto);
    s << indent << "g_sta: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.g_sta);
    s << indent << "g_obj: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.g_obj);
    s << indent << "g_flt: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.g_flt);
    s << indent << "g_pr: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.g_pr);
    s << indent << "g_po: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.g_po);
    s << indent << "g_cu: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.g_cu);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBOTIQ_GRIPPER_MSGS_MESSAGE_GRIPPERSTATUS_H
