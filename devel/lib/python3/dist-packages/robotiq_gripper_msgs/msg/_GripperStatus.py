# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from robotiq_gripper_msgs/GripperStatus.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class GripperStatus(genpy.Message):
  _md5sum = "ae882ea5fd2ea006815a4db0a359f9f4"
  _type = "robotiq_gripper_msgs/GripperStatus"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """uint8 g_act
uint8 g_gto
uint8 g_sta
uint8 g_obj
uint8 g_flt
uint8 g_pr
uint8 g_po
uint8 g_cu"""
  __slots__ = ['g_act','g_gto','g_sta','g_obj','g_flt','g_pr','g_po','g_cu']
  _slot_types = ['uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       g_act,g_gto,g_sta,g_obj,g_flt,g_pr,g_po,g_cu

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(GripperStatus, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.g_act is None:
        self.g_act = 0
      if self.g_gto is None:
        self.g_gto = 0
      if self.g_sta is None:
        self.g_sta = 0
      if self.g_obj is None:
        self.g_obj = 0
      if self.g_flt is None:
        self.g_flt = 0
      if self.g_pr is None:
        self.g_pr = 0
      if self.g_po is None:
        self.g_po = 0
      if self.g_cu is None:
        self.g_cu = 0
    else:
      self.g_act = 0
      self.g_gto = 0
      self.g_sta = 0
      self.g_obj = 0
      self.g_flt = 0
      self.g_pr = 0
      self.g_po = 0
      self.g_cu = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_8B().pack(_x.g_act, _x.g_gto, _x.g_sta, _x.g_obj, _x.g_flt, _x.g_pr, _x.g_po, _x.g_cu))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 8
      (_x.g_act, _x.g_gto, _x.g_sta, _x.g_obj, _x.g_flt, _x.g_pr, _x.g_po, _x.g_cu,) = _get_struct_8B().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_8B().pack(_x.g_act, _x.g_gto, _x.g_sta, _x.g_obj, _x.g_flt, _x.g_pr, _x.g_po, _x.g_cu))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 8
      (_x.g_act, _x.g_gto, _x.g_sta, _x.g_obj, _x.g_flt, _x.g_pr, _x.g_po, _x.g_cu,) = _get_struct_8B().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_8B = None
def _get_struct_8B():
    global _struct_8B
    if _struct_8B is None:
        _struct_8B = struct.Struct("<8B")
    return _struct_8B
